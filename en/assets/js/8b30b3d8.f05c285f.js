"use strict";(self.webpackChunksamzong_me=self.webpackChunksamzong_me||[]).push([[55532],{124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var o=n(17624),i=n(4552);const s={title:"python3 setup.py --help-commands",tags:["Python"]},a=void 0,l={permalink:"/en/2020/11/04/python3-setup.py-help-commands",source:"@site/blog/2020-11-04-python3-setup.py-help-commands.md",title:"python3 setup.py --help-commands",description:"",date:"2020-11-04T00:00:00.000Z",formattedDate:"November 4, 2020",tags:[{label:"Python",permalink:"/en/tags/python"}],hasTruncateMarker:!1,authors:[],frontMatter:{title:"python3 setup.py --help-commands",tags:["Python"]},unlisted:!1,prevItem:{title:"beautiful soup 4 \u4f7f\u7528\u6280\u5de7",permalink:"/en/2020/11/05/beautiful-soup-4-shi-yong-ji-qiao"},nextItem:{title:"Use devtools encodeurl & decodeurl",permalink:"/en/2020/10/23/use-devtools-encodeurl-&-decodeurl"}},r={authorsImageUrls:[]},d=[];function c(e){const t={code:"code",pre:"pre",...(0,i.M)(),...e.components};return(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'\u2192 python3 setup.py --help-commands\n\nStandard commands:\n  build             build everything needed to install\n  build_py          "build" pure Python modules (copy to build directory)\n  build_ext         build C/C++ extensions (compile/link to build directory)\n  build_clib        build C/C++ libraries used by Python extensions\n  build_scripts     "build" scripts (copy and fixup #! line)\n  clean             clean up temporary files from \'build\' command\n  install           install everything from build directory\n  install_lib       install all Python modules (extensions and pure Python)\n  install_headers   install C/C++ header files\n  install_scripts   install scripts (Python or otherwise)\n  install_data      install data files\n  sdist             create a source distribution (tarball, zip file, etc.)\n  register          register the distribution with the Python package index\n  bdist             create a built (binary) distribution\n  bdist_dumb        create a "dumb" built distribution\n  bdist_rpm         create an RPM distribution\n  bdist_wininst     create an executable installer for MS Windows\n  check             perform some checks on the package\n  upload            upload binary package to PyPI\n\nExtra commands:\n  bdist_wheel       create a wheel distribution\n  alias             define a shortcut to invoke one or more commands\n  bdist_egg         create an "egg" distribution\n  develop           install package in \'development mode\'\n  dist_info         create a .dist-info directory\n  easy_install      Find/get/install Python packages\n  egg_info          create a distribution\'s .egg-info directory\n  install_egg_info  Install an .egg-info directory for the package\n  rotate            delete older distributions, keeping N newest files\n  saveopts          save supplied options to setup.cfg or other config file\n  setopt            set an option in setup.cfg or another config file\n  test              run unit tests after in-place build (deprecated)\n  upload_docs       Upload documentation to PyPI\n\nusage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\n   or: setup.py --help [cmd1 cmd2 ...]\n   or: setup.py --help-commands\n   or: setup.py cmd --help\n'})})}function p(e={}){const{wrapper:t}={...(0,i.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>l,M:()=>a});var o=n(11504);const i={},s=o.createContext(i);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);