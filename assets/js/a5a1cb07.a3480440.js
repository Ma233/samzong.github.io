"use strict";(self.webpackChunksamzong_me=self.webpackChunksamzong_me||[]).push([[4573],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,d=u["".concat(l,".").concat(m)]||u[m]||y[m]||a;return t?o.createElement(d,i(i({ref:n},c),{},{components:t})):o.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},41426:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=t(87462),r=(t(67294),t(3905));const a={title:"\u4f7f\u7528 Python3 \u683c\u5f0f\u5316\u5927\u578b json \u6587\u4ef6",tags:["Python"]},i=void 0,s={permalink:"/blog/2021/09/05/shi-yong-python3-ge-shi-hua-da-xing-json-wen-jian",source:"@site/blog/2021-09-05-shi-yong-python3-ge-shi-hua-da-xing-json-wen-jian.md",title:"\u4f7f\u7528 Python3 \u683c\u5f0f\u5316\u5927\u578b json \u6587\u4ef6",description:"\u5f53\u5355\u4e2a\u751a\u81f3\u5355\u884c Json \u6587\u4ef6\u5927\u5c0f\u8d85\u8fc7 100M \u65f6\uff0c\u65e0\u8bba\u662f\u54ea\u4e2a\u6587\u672c\u7f16\u8f91\u5668\u5728\u5904\u7406\u65f6\u90fd\u4f1a\u663e\u5f97\u5403\u529b\uff0c\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u79cd\u975e\u5e38\u65b9\u4fbf\u7684\u65b9\u5f0f\uff0c\u5feb\u901f\u683c\u5f0f\u5316\u5927\u578b Json \u6587\u4ef6\u3002",date:"2021-09-05T00:00:00.000Z",formattedDate:"September 5, 2021",tags:[{label:"Python",permalink:"/blog/tags/python"}],readingTime:.88,hasTruncateMarker:!1,authors:[],frontMatter:{title:"\u4f7f\u7528 Python3 \u683c\u5f0f\u5316\u5927\u578b json \u6587\u4ef6",tags:["Python"]},prevItem:{title:"dataframe - Pandas",permalink:"/blog/2021/09/05/dataframe-pandas"},nextItem:{title:"Python \u6293\u51fa\u6765\u968f\u673a\u4e0b\u8f7d\u8bb0\u5f55",permalink:"/blog/2021/08/25/python-zhua-chu-lai-sui-ji-xia-zai-ji-lu"}},l={authorsImageUrls:[]},p=[{value:"No BB, Show Code",id:"no-bb-show-code",level:2},{value:"RUNNING",id:"running",level:2}],c={toc:p},u="wrapper";function y(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u5f53\u5355\u4e2a\u751a\u81f3\u5355\u884c Json \u6587\u4ef6\u5927\u5c0f\u8d85\u8fc7 100M \u65f6\uff0c\u65e0\u8bba\u662f\u54ea\u4e2a\u6587\u672c\u7f16\u8f91\u5668\u5728\u5904\u7406\u65f6\u90fd\u4f1a\u663e\u5f97\u5403\u529b\uff0c\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u79cd\u975e\u5e38\u65b9\u4fbf\u7684\u65b9\u5f0f\uff0c\u5feb\u901f\u683c\u5f0f\u5316\u5927\u578b Json \u6587\u4ef6\u3002"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Python \u81ea\u5e26 json-tool \u5728\u8f6c\u6362\u662f\u4f1a\u5bfc\u81f4\u4e2d\u6587\u4e71\u7801\uff0c\u4ee5\u4e0b\u5728\u539f\u6709\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u589e\u52a0\u4e2d\u6587\u652f\u6301")),(0,r.kt)("h2",{id:"no-bb-show-code"},"No BB, Show Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\"\"\"\nCommand-line tool to validate and pretty-print JSON\n\nUsage::\n\n    $ python3 json-tool.json import.json  output.json\n\n    Need Python 3.\n\n\"\"\"\nimport argparse\nimport collections\nimport json\nimport sys\n\n\ndef main():\n    prog = 'python -m json.tool'\n    description = ('A simple command line interface for json module '\n                   'to validate and pretty-print JSON objects.')\n    parser = argparse.ArgumentParser(prog=prog, description=description)\n    parser.add_argument('infile', nargs='?', type=argparse.FileType(),\n                        help='a JSON file to be validated or pretty-printed')\n    parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),\n                        help='write the output of infile to outfile')\n    parser.add_argument('--sort-keys', action='store_true', default=False,\n                        help='sort the output of dictionaries alphabetically by key')\n    options = parser.parse_args()\n\n    infile = options.infile or sys.stdin\n    outfile = options.outfile or sys.stdout\n    sort_keys = options.sort_keys\n    with infile:\n        try:\n            if sort_keys:\n                obj = json.load(infile)\n            else:\n                obj = json.load(infile,\n                                object_pairs_hook=collections.OrderedDict)\n        except ValueError as e:\n            raise SystemExit(e)\n    with outfile:\n        json.dump(obj, outfile, sort_keys=sort_keys, ensure_ascii=False, indent=2)\n        outfile.write('\\n')\n\n\nif __name__ == '__main__':\n    main()\n")),(0,r.kt)("h2",{id:"running"},"RUNNING"),(0,r.kt)("p",null,"\u5c06\u4ee5\u4e0a\u4ee3\u7801\u6587\u4ef6\u4fdd\u5b58\u4e3a json-tool.json\uff0c\u7136\u540e\u4f7f\u7528 Python3 \u8fd0\u884c\u5373\u53ef"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 json-tool.json 190720_190730.json 06.json\n")))}y.isMDXComponent=!0}}]);